# Install necessary libraries
!pip install opencv-python mediapipe

# Import necessary libraries
import cv2
import mediapipe as mp

# Initialize MediaPipe Hands solution
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

# Initialize the Hands model with desired parameters
hands = mp_hands.Hands(
    max_num_hands=1,       # Maximum number of hands to detect
    min_detection_confidence=0.7,  # Minimum detection confidence
    min_tracking_confidence=0.5    # Minimum tracking confidence
)

# Start capturing video from the built-in camera
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame.")
        break

    # Convert the frame color from BGR to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the frame and find hand landmarks
    results = hands.process(frame_rgb)

    # If hand landmarks are detected
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Draw landmarks on the original BGR frame
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Check for hand gestures based on landmark positions
            landmarks = hand_landmarks.landmark
            thumb_tip = landmarks[mp_hands.HandLandmark.THUMB_TIP]
            index_tip = landmarks[mp_hands.HandLandmark.INDEX_FINGER_TIP]

            # Example condition for recognizing a gesture
            if index_tip.y < thumb_tip.y:  # Gesture for 'open hand'
                cv2.putText(frame, "Gesture: Open Hand", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            else:  # Gesture for 'closed fist'
                cv2.putText(frame, "Gesture: Closed Fist", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    # Display the processed frame
    cv2.imshow('Hand Gesture Recognition', frame)

    # Break the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()



  if this does not work we can try this version also 
# Install specific versions of the libraries to avoid conflicts
!pip install opencv-python mediapipe==0.10.15 protobuf==3.20.3
